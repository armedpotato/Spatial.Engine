name: Build

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request: {}

jobs:
  build:
    name: ${{ matrix.config.name }}
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            INSTALL_LOCATION: "d:/a/.local",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            CACHE_LOCATION: '${{matrix.config.INSTALL_LOCATION}}'
          }
        - {
            name: "Windows Latest MinGW",
            artifact: "Windows-MinGW.tar.xz",
            os: windows-latest,
            cc: "gcc",
            cxx: "g++",
            INSTALL_LOCATION: "d:/a/.local",
            CACHE_LOCATION: '${{env.INSTALL_LOCATION}}'
          }
        - {
            name: "Ubuntu Latest GCC",
            artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++",
            INSTALL_LOCATION: '${{github.workspace}}/.local',
            CACHE_LOCATION: '${{github.workspace}}/${{env.INSTALL_LOCATION}}'
          }
        - {
            name: "macOS Latest Clang",
            artifact: "macOS.tar.xz",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++",
            INSTALL_LOCATION: '${{github.workspace}}/.local',
            CACHE_LOCATION: '${{github.workspace}}/${{env.INSTALL_LOCATION}}'
          }

    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{env.CACHE_LOCATION}}
        key: ${{runner.os}}-dependencies
    
    - name: configure
      run: cmake -Bbuild -DCMAKE_INSTALL_PREFIX="$env:INSTALL_LOCATION"
      
    - name: build
      run: cmake --build build --config "$env:BUILD_TYPE" -j4

    - name: run tests
      run: |
        cd build
        ctest -C "$env:BUILD_TYPE" -VV

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: build/app*

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2

    - name: Upload to Release
      uses: meeDamian/github-release@2.0
      with:
        files: >
          Windows-MSVC.tar.xz
          Windows-MinGW.tar.xz
          Linux.tar.xz
          macOS.tar.xz
        gzip: folders
        token: ${{ secrets.GITHUB_TOKEN }}
